package {{.PackageController}}
{{- if .ControllerImportList}}
{{/* 注释是这么写 ,双花括号中的横线放最前面时，此段多出一个空行，放最后时无空行*/}} 
import (
	"github.com/gin-gonic/gin"
	"github.com/jinzhu/copier"
	"github.com/kuaileniu/id"
	"github.com/kuaileniu/pool"
	"github.com/kuaileniu/sliceutil"
	"go.zhsit.cn/db/v2"
	"go.zhsit.cn/zweb/ctx"
	"go.zhsit.cn/zweb/enum"
	"go.uber.org/zap"
	"net/http"
	"strings"
	"fmt"
	{{- range $v:= .ControllerImportList}}
	"{{$v}}"
	{{- end}}
)
{{- end }}
{{range $table:= .TableList}}

func Add{{.PoName}}(c *gin.Context) {
	req := struct {
		model.{{.PoName}}
	}{}
	c.ShouldBindJSON(&req)
	{{- range .ColumnList}}{{/*不能为空的情况*/}}
	{{- if eq .AppNotnull "notnull" }}
	{{- if eq .PropType "string"}}
	if strings.TrimSpace(req.{{ .PropName}}) == "" {
		c.JSON(http.StatusOK, ctx.Resp{Status: enum.StatusErrorTip, Msg: "{{.PropComment}}不可为空。", EnglishMsg: "{{ .PropName}} can't be blank."})
		return
	}
	{{- end}}
	{{- if eq .PropType "int64"}}
	if req.{{ .PropName}} < 1 {
		c.JSON(http.StatusOK, ctx.Resp{Status: enum.StatusErrorTip, Msg: "{{.PropComment}}不可为空。", EnglishMsg: "{{ .PropName}} can't be blank."})
		return
	}
	{{- end}}
	{{- end}}
	{{- end}}

	{{- range .ColumnList}}{{/*不能为空的情况*/}}
	{{- if eq .AppNotRepeat "notrepeat" }}
	{
		{{ if  $table.ZoneKey -}}
		exist, e := db.Engine({{$.Engine_name}}).In(model.{{$table.PoName}}_{{$table.ZoneKey}}_DB, req.JobId).Exist(&model.{{$table.PoName}}{ {{- .PropName}}: req.{{.PropName}} })
		{{ else }}
		exist, e := db.Engine({{$.Engine_name}}).Exist(&model.{{$table.PoName}}{ {{.PropName}}: req.{{.PropName}} })
		{{ end -}}
		if e != nil {
			zap.L().Error("根据 {{.PropName}} 查询 {{$table.PoName}} 时异常", zap.Error(e))
			c.JSON(http.StatusOK, ctx.Resp{Status: enum.StatusErrorTip, Msg: "添加失败。", EnglishMsg: "Add failed"})
			return
		}
		if exist {
			c.JSON(http.StatusOK, ctx.Resp{Status: enum.StatusErrorTip, Msg: "添加失败,{{.PropComment}}重复。", EnglishMsg: "Add failed,duplicate {{.PropName}}."})
			return
		}
	}
	
	{{- end}}
	{{- end}}

	po := req.{{$table.PoName}}
	{{- range .ColumnList}}        {{/*单独设置 Id CreatedBy,CanDel */}}
	{{- if eq .PropName "Id" }}
	po.Id = id.CreateTimeId15()
	{{- end }}
	{{- if eq .PropName "CreatedBy" }}
	po.CreatedBy = GetCurrentStaffName(c)
	{{- end }}
	{{- if eq .PropName "CanDel" }}
	{{/* po.CanDel = true */}} 
	{{- end }}
	{{- end }}   {{/*单独设置 Id CreatedBy,CanDel */}}
	if _, err := db.Engine({{$.Engine_name}}).Insert(&po); err != nil {
		zap.L().Error("添加 {{$table.PoName}} 时异常", zap.Error(err))
		c.JSON(http.StatusOK, ctx.Resp{Status: enum.StatusErrorTip, Msg: "添加失败", EnglishMsg: "Add failed"})
		return
	}
	{{ if $table.MarkCannotDel -}}
	{{$table.MarkCannotDel}}
	{{ end -}}
	c.JSON(http.StatusOK, ctx.Resp{Status: enum.StatusOkTip, Msg: "添加成功", EnglishMsg: "Add success", Data: gin.H{"Id": po.Id}})
}

func Del{{.PoName}}(c *gin.Context) {
	req := struct {
		Ids []int64  `json:"Ids"`
	}{}
	c.ShouldBindJSON(&req)

	if len(req.Ids) < 1 {
		c.JSON(http.StatusOK, ctx.Resp{Status: enum.StatusErrorTip, Msg: "Ids不可为空", EnglishMsg: "Ids can't be blank"})
		return
	}

	num, err := db.Session({{$.Engine_name}}).In(model.{{$table.PoName}}_Id_DB, req.Ids).Delete(&model.{{$table.PoName}}{})
	if err != nil {
		zap.L().Error("删除 {{$table.PoName}} 时异常", zap.Error(err))
		c.JSON(http.StatusOK, ctx.Resp{Status: enum.StatusErrorTip, Msg: "删除失败。", EnglishMsg: "Failed."})
		return
	}
	c.JSON(http.StatusOK, ctx.Resp{Status: enum.StatusOkTip, Msg: fmt.Sprint(num, " 条数据删除成功。"), EnglishMsg: fmt.Sprint(num, " success.")})
}

func Edit{{.PoName}}(c *gin.Context) {
	req := struct {
		model.{{.PoName}}
	}{}
	body := GetBody(c, &req)

	if req.Id < 1 {
		c.JSON(http.StatusOK, ctx.Resp{Status: enum.StatusErrorTip, Msg: "Id不可为空", EnglishMsg: "Id can't be empty"})
		return
	}

	po := model.{{.PoName}}{Id: req.Id}
	session := db.Session({{$.Engine_name}})

	{{- range .ColumnList -}}{{/* 判断前端是否传值过来*/}}
	{{- if or .IsKey (eq .PropName "CreatedBy") (eq .PropName "ModifiedBy") (eq .PropName "CreateTime") (eq .PropName  "ModifyTime") (eq .PropName "CanDel") }}
		{{- continue -}}
	{{- end -}}
	{{- if and .ForeignKey  (eq .PropType "int64") }}
	if strings.Contains(body, strings.ToUpper(model.{{$table.PoName}}_{{.PropName}}_GO)) && req.{{.PropName}} > 0 {
	{{- else if or  (eq .PropType "ztype.Int8") (eq .PropType "ztype.Int16") (eq .PropType "ztype.Int32") (eq .PropType "ztype.Int64") (eq .PropType "ztype.Float32")  (eq .PropType "ztype.Float64") (eq .PropType "ztype.String") }}
	if req.{{.PropName}} != nil {
	{{- else }}
	if strings.Contains(body, strings.ToUpper(model.{{$table.PoName}}_{{.PropName}}_GO)) {
	{{- end }}
		session.Cols(model.{{$table.PoName}}_{{.PropName}}_DB)
		po.{{.PropName}} = req.{{.PropName}}
		{{- if eq .AppNotnull "notnull" }}     {{/*判断必传参数必须存在*/}}
		{{- if eq .PropType "string"}}
		if strings.TrimSpace(req.{{ .PropName}}) == "" {
			c.JSON(http.StatusOK, ctx.Resp{Status: enum.StatusErrorTip, Msg: "{{.PropComment}}不可为空。", EnglishMsg: "{{ .PropName}} can't be blank."})
			return
		}
		{{- end}}
		{{- if eq .PropType "int64"}}
		if req.{{ .PropName}} < 1 {
			c.JSON(http.StatusOK, ctx.Resp{Status: enum.StatusErrorTip, Msg: "{{.PropComment}}不可为空。", EnglishMsg: "{{ .PropName}} can't be blank."})
			return
		}
		{{- end}}
		{{- end}}{{/*判断必传参数必须存在*/}}
		{{- if eq .AppNotRepeat "notrepeat" }} {{/*判断数据不重复*/}}
		{{ if  $table.ZoneKey -}}
		exist, e := db.Engine({{$.Engine_name}}).In(model.{{$table.PoName}}_{{$table.ZoneKey}}_DB, req.JobId).NotIn(model.{{$table.PoName}}_Id_DB,req.Id).Exist(&model.{{$table.PoName}}{ {{.PropName}}: req.{{.PropName}} })
		{{ else }}
		exist, e := db.Engine({{$.Engine_name}}).NotIn(model.{{$table.PoName}}_Id_DB,req.Id).Exist(&model.{{$table.PoName}}{ {{.PropName}}: req.{{.PropName}} })
		{{ end -}}
		if e != nil {
			zap.L().Error("根据 {{.PropName}} 查询 {{$table.PoName}} 时异常", zap.Error(e))
			c.JSON(http.StatusOK, ctx.Resp{Status: enum.StatusErrorTip, Msg: "修改失败。", EnglishMsg: "Edit failed"})
			return
		}
		if exist {
			c.JSON(http.StatusOK, ctx.Resp{Status: enum.StatusErrorTip, Msg: "修改失败,{{.PropComment}}重复。", EnglishMsg: "Edit failed,duplicate {{.PropName}}."})
			return
		}{{- end -}}{{/*判断数据不重复*/}}
	}
	{{- end -}}{{/* 判断前端是否传值过来*/}}
	{{- range .ColumnList -}}        {{/*单独设置 ModifiedBy */}}
	{{- if eq .PropName "ModifiedBy" }}
	po.ModifiedBy = GetCurrentStaffName(c)
	session.Cols(model.{{$table.PoName}}_{{.PropName}}_DB)
	{{- end }}
	{{- end }} {{/*单独设置 ModifiedBy */}}

	num, err := session.ID(req.Id).Update(&po){{/* 保存修改的内容 */}}
	if num != 1 {
		if err != nil {
			zap.L().Error("修改 {{$table.PoName}} 失败", zap.Error(err))
		}
		c.JSON(http.StatusOK, ctx.Resp{Status: enum.StatusErrorTip, Msg: "修改失败。", EnglishMsg: "Failed."})
		return
	}
	{{- if .MarkCannotDel}}
	{{.MarkCannotDel}}
	{{- end }}
	c.JSON(http.StatusOK, &ctx.Resp{Status: enum.StatusOkTip, Msg: "修改成功。", EnglishMsg: "Success."})
}

func Get{{.PoName}}Page(c *gin.Context) {
	req := struct {
		model.{{.PoName}}
		ctx.Req
		Search string  `json:"search"`
	}{}
	c.ShouldBindJSON(&req)
	{{ if $table.ZoneKey }}
	if req.{{$table.ZoneKey}} < 1 {
		c.JSON(http.StatusOK, ctx.Resp{Status: enum.StatusErrorTip, Msg: "请填写正确的{{$table.ZoneKeyComment}}。", EnglishMsg: "{{$table.ZoneKey}} is incorrect."})
		return
	}
	{{- end }}
	poSli := make([]model.{{.PoName}}, 0)
	session := db.Session({{$.Engine_name}})
	if req.Search != "" {
		{{- range .SearchSli}}
		session.Or(model.{{$table.PoName}}_{{.}}_DB + " like ?","%"+req.Search+"%" )
		{{- end }}
	}
	{{- $OrderByStr := "" }}
	{{- range .ColumnList}}        {{/*查询排序条件OrderNo,CreateTime */}}
	{{- if eq .PropName "OrderNo"}}
		{{- $OrderByStr = print ".Asc(model."  $table.PoName "_OrderNo_DB)"}}
		{{break}}
	{{- else if eq .PropName "CreateTime"}}
		 {{- $OrderByStr = print ".Desc(model."  $table.PoName "_CreateTime_DB)"}}
		{{break}}
	{{- else }}	
	{{- end}}
	{{- end}}
	{{- if $table.ZoneKey }}
	total, err := session.In(model.{{.PoName}}_{{$table.ZoneKey}}_DB, req.{{$table.ZoneKey}}).Limit(req.PageSize, req.PageStart()){{ $OrderByStr}}.FindAndCount(&poSli)
	{{- else }}
	total, err := session.Limit(req.PageSize, req.PageStart()){{ $OrderByStr}}.FindAndCount(&poSli)
	{{- end }}
	if err != nil {
		zap.L().Error("查询 {{.PoName}} 表时发生异常", zap.Error(err))
		c.JSON(http.StatusOK, ctx.Resp{Status: enum.StatusErrorTip, Msg: "查询数据发生异常请稍后重试", EnglishMsg: "Error occurs when finding data"})
		return
	}
	{{- range .VoPropSli}}
	{{.VoDependent}}Sli := make([]int64, 0)
	{{- end }}
	{{- range .VoMultiPropSli}}
	{{.RefPropInVo}}Sli := make([]int64, 0)
	{{- end }}
	type VO struct {
		model.{{.PoName}}
		{{- range .VoPropSli}}
		// {{.VoShowComment}}
		{{.VoShow}} {{.VoShowType}}
		{{- end }}
		{{- range .VoMultiPropSli}}
			{{- range .MultiPropSli}}
			// {{.VoShowComment}}
			{{.VoShow}} {{.VoShowType}} {{.VoShowTag}}
			{{- end}}
		{{- end}}
	}
	voSli := make([]VO, len(poSli))
	for i := 0; i < len(poSli); i++ {
		vo := VO{}
		copier.Copy(&vo, &(poSli[i]))
		voSli[i] = vo
		{{- range .VoPropSli}}
		sliceutil.AddNoRepeatInt64(&{{.VoDependent}}Sli, vo.{{.VoDependent}})
		{{- end }}
		{{- range .VoMultiPropSli}}
		sliceutil.AddNoRepeatInt64(&{{.RefPropInVo}}Sli, vo.{{.RefPropInVo}})
		{{- end }}
	}

	{{- if .VoPropSli}}
		goOn := true
		wg := pool.NewWaitGroup({{len .VoPropSli}})
	{{- end }}
	{{- if .VoMultiPropSli}}
	    goOn := true
		wg := pool.NewWaitGroup({{len .VoMultiPropSli}})
	{{- end }}
	{{- range .VoPropSli}}
	 	wg.Add(func(){
			poMap := make(map[int64]*model.{{.Po}})
			if err := db.Engine({{$.Engine_name}}).In(model.{{.Po}}_{{.PoKeyName}}_DB, {{.VoDependent}}Sli).Cols(model.{{.Po}}_{{.PoKeyName}}_DB, model.{{.Po}}_{{.PoDependent}}_DB).Find(&poMap); err != nil {
				goOn = false
				zap.L().Error("查询 {{.Po}} 表时发生异常", zap.Error(err))
				c.JSON(http.StatusOK, ctx.Resp{Status: enum.StatusErrorTip, Msg: "查询数据发生异常请稍后重试", EnglishMsg: "Error occurs when finding data"})
				return
			}
			for i := 0; i < len(voSli); i++ {
				voPtr := &voSli[i]
				id := voPtr.{{.VoDependent}}
				if id > 0 {
					POPtr := poMap[id]
					if POPtr != nil {
						voPtr.{{.VoShow}} = POPtr.{{.PoDependent}}
					}
				}
			}
		 })
	{{- end }}
	{{- range .VoMultiPropSli}}
	 	wg.Add(func(){
			poMap := make(map[int64]*model.{{.TargetPo}})
			if err := db.Engine({{$.Engine_name}}).In(model.{{.TargetPo}}_{{.TargetPoKey}}_DB, {{.RefPropInVo}}Sli).Cols({{.SelectColumn}}).Find(&poMap); err != nil {
				goOn = false
				zap.L().Error("查询 {{.TargetPo}} 表时发生异常", zap.Error(err))
				c.JSON(http.StatusOK, ctx.Resp{Status: enum.StatusErrorTip, Msg: "查询数据发生异常请稍后重试", EnglishMsg: "Error occurs when finding data"})
				return
			}
			for i := 0; i < len(voSli); i++ {
				voPtr := &voSli[i]
				id := voPtr.{{.RefPropInVo}}
				if id > 0 {
					POPtr := poMap[id]
					if POPtr != nil {
						{{- range .MultiPropSli}}
						voPtr.{{.VoShow}} = POPtr.{{.ThePoProp}}
						{{- end}}
					}
				}
			}
		 })
	{{- end }}
	{{- if .VoPropSli}}
	    wg.Wait()
	{{- end }}
	{{- if .VoMultiPropSli}}
	    wg.Wait()
		if !goOn {
			return
		}
	{{- end }}
	c.JSON(http.StatusOK, (&ctx.PageResp{Total: total}).SetData(voSli)) //分页结果
}
{{- end}}

